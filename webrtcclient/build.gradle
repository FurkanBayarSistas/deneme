apply plugin: 'com.android.application'
import groovy.json.JsonSlurper

def appVersionName = '2.0.0'
def appVersionCode = 8

android {
    namespace 'com.audiocodes.mv.webrtcclient'

    compileSdk 34
    buildToolsVersion '34.0.0'

    

    def ExternalConfigs = getExternalConfigs(project.name, appVersionName,appVersionCode)

    appVersionName = ExternalConfigs.exVersionName
    appVersionCode = ExternalConfigs.exVersionCode


   // renameAPKs(applicationVariants,project.name)

    signingConfigs {
        release {
            storeFile file('./src/main/webrtc')
            storePassword "mvwebrtc"
            keyAlias "webrtc"
            keyPassword "webrtcmobile"
        }
    }
    ////

    defaultConfig {
        applicationId "com.audiocodes.mv.webrtcclient"
        targetSdkVersion 34
        minSdkVersion 26
        versionCode appVersionCode
        versionName appVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

}

task writeReleaseNotes(dependsOn: 'assembleRelease') {

    doFirst() {
        println('Task writeReleaseNotes '+project.name)

        writeReleaseNotes(project.name,project.getBuildFile(),appVersionName,appVersionCode)
        javaexec {
            main = "-jar";
            args = ["../../../VersionControl/RNGeneratorWebRTC.jar"]
        }
    }
}
////2
task ACrelease(dependsOn: 'writeReleaseNotes') {
    doFirst() {
        println('Task ACrelease '+project.name)
    }
}


class ExValues {

    def exBuildNumber
    def exVersionName
    def exVersionCode
    def exBuildRequest
}


def getExternalConfigs(project, versionNameOrg, versionCodeOrg) {

    def exValues = new ExValues()

    try {


        def inputFile = new File('WebRTC.json')
        def json = new JsonSlurper().parseText(inputFile.text)


        exValues.exVersionName = json.VersionName
        exValues.exVersionCode = json.VersionCode


    } catch (Throwable e) {

        exValues.exVersionName = versionNameOrg
        exValues.exVersionCode = versionCodeOrg
        exValues.exBuildRequest = '(No ExternalConfig.json)'

        println 'Could not read ExternalConfig.json file: ' + e.toString()
    }




    return exValues
}



def writeReleaseNotes(project, fileName, versionName, versionCode) {

    def ReleaseNotesFile = new File('./config.properties')
    println 'ReleaseNotesFile: ' + ReleaseNotesFile.path
    println 'ReleaseNotesFile: ' + ReleaseNotesFile.absolutePath
    println 'ReleaseNotesFile: ' + ReleaseNotesFile.canonicalPath

    println 'Writing release notes from gradle'
    ReleaseNotesFile.write ''

    ReleaseNotesFile.append 'Link=ftp://cmsdemo.mailvision.com/' + fileName + '\n'
    ReleaseNotesFile.append 'Date=' + new Date().format('dd/MM/yyyy') + '\n'
    ReleaseNotesFile.append 'Project=' + project + '\n'
    ReleaseNotesFile.append 'Branding=' + project + '\n'
    ReleaseNotesFile.append 'Application_Name=' + readConfiguration('app_name', project) + '\n'

    ReleaseNotesFile.append 'Version_Name=' + versionName + '\n'
    ReleaseNotesFile.append 'Version_Code=' + versionCode + '\n'
    ReleaseNotesFile.append 'Log_Level=' + readConfiguration('log_level_default', project) + '\n'
    ReleaseNotesFile.append 'Descripstion=' + project + '\n'
    ReleaseNotesFile.append 'Global_Success=Failed' + '\n' //Default value

}

def readConfiguration(data, project) {

    def parsedProjectXml = (new XmlParser()).parse('./src/main/res/values/configuration.xml')
    return parsedProjectXml.string.find { it.@name.equals data }.text()

}

/////

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')

    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.media3:media3-session:1.3.1'
    //testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'com.google.android.material:material:1.11.0'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    testImplementation 'junit:junit:4.13.2'
    implementation 'androidx.appcompat:appcompat:1.6.1'
   
    implementation 'com.google.firebase:firebase-core:16.0.0'
    implementation 'com.google.firebase:firebase-messaging:17.0.0'

    implementation 'com.google.code.gson:gson:2.8.6'
    api project(':webrtcsdk-release')
}
